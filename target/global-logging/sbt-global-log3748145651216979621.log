[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\johan\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\johan\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.2 (Eclipse Adoptium Java 17.0.2)
[debug]       Load.loadUnit: plugins took 97.3746ms
[debug]       Load.loadUnit: defsScala took 0.3792ms
[debug] [Loading] Scanning directory C:\Users\johan\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\johan\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 11.6018 ms
[debug]           Load.resolveProject(global-plugins) took 34.0661ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\johan\.sbt\1.0\plugins, plugins: List(<none>))) took 64.1743ms
[debug] [Loading] Done in C:\Users\johan\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 87.2727ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2018ms
[debug]     Load.loadUnit(file:/C:/Users/johan/.sbt/1.0/plugins/, ...) took 193.964ms
[debug]   Load.apply: load took 345.9705ms
[debug]   Load.apply: resolveProjects took 4.8145ms
[debug]   Load.apply: finalTransforms took 60.7995ms
[debug]   Load.apply: config.delegates took 9.2781ms
[debug]   Load.apply: Def.make(settings)... took 442.8676ms
[debug]   Load.apply: structureIndex took 93.1501ms
[debug]   Load.apply: mkStreams took 3.3615ms
[info] loading global plugins from C:\Users\johan\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2763.8323ms
[debug]           Load.loadUnit: plugins took 19.1162ms
[debug]           Load.loadUnit: defsScala took 0.0027ms
[debug] [Loading] Scanning directory C:\Users\johan\IdeaProjects\GameEnjin\project
[debug]             Load.loadUnit: mkEval took 13.1808ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\johan\IdeaProjects\GameEnjin\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.2605 ms
[info] loading settings for project gameenjin-build from idea.sbt ...
[debug]               Load.resolveProject(gameenjin-build) took 2.3451ms
[debug]             Load.loadTransitive: finalizeProject(Project(id gameenjin-build, base: C:\Users\johan\IdeaProjects\GameEnjin\project, plugins: List(<none>))) took 3.9533ms
[debug] [Loading] Done in C:\Users\johan\IdeaProjects\GameEnjin\project, returning: (gameenjin-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 130.9101ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.5577ms
[debug]         Load.loadUnit(file:/C:/Users/johan/IdeaProjects/GameEnjin/project/, ...) took 155.349ms
[debug]       Load.apply: load took 156.3308ms
[debug]       Load.apply: resolveProjects took 0.0897ms
[debug]       Load.apply: finalTransforms took 7.554ms
[debug]       Load.apply: config.delegates took 0.3012ms
[debug]       Load.apply: Def.make(settings)... took 72.7131ms
[debug]       Load.apply: structureIndex took 25.0145ms
[debug]       Load.apply: mkStreams took 0.002ms
[info] loading project definition from C:\Users\johan\IdeaProjects\GameEnjin\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 3294.0162ms
[debug]     Load.loadUnit: defsScala took 0.0022ms
[debug] [Loading] Scanning directory C:\Users\johan\IdeaProjects\GameEnjin
[debug]       Load.loadUnit: mkEval took 0.184ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.8272 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 40.782ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\johan\IdeaProjects\GameEnjin, plugins: List(<none>))) took 44.3417ms
[debug] [Loading] Done in C:\Users\johan\IdeaProjects\GameEnjin, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 2304.6904ms
[debug]     Load.loadUnit: cleanEvalClasses took 16.4544ms
[debug]   Load.loadUnit(file:/C:/Users/johan/IdeaProjects/GameEnjin/, ...) took 5615.7857ms
[debug] Load.apply: load took 5616.8265ms
[debug] Load.apply: resolveProjects took 0.0587ms
[debug] Load.apply: finalTransforms took 35.8651ms
[debug] Load.apply: config.delegates took 0.2726ms
[debug] Load.apply: Def.make(settings)... took 59.8694ms
[debug] Load.apply: structureIndex took 16.3979ms
[debug] Load.apply: mkStreams took 0.0015ms
[info] set current project to gameEnjin (in build file:/C:/Users/johan/IdeaProjects/GameEnjin/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 65499 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 65499, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to gameEnjin (in build file:/C:/Users/johan/IdeaProjects/GameEnjin/)
[debug] > Exec(idea-shell, None, None)
